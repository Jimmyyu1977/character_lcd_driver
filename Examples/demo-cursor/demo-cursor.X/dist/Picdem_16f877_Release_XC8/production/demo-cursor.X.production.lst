

Microchip Technology PIC PRO Macro Assembler V1.33 build 59893 
                                                                                               Sun Jan 21 12:05:30 2018

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	pa_nodes,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000D                     	;# 
    33  000E                     	;# 
    34  000E                     	;# 
    35  000F                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0013                     	;# 
    40  0014                     	;# 
    41  0015                     	;# 
    42  0015                     	;# 
    43  0016                     	;# 
    44  0017                     	;# 
    45  0018                     	;# 
    46  0019                     	;# 
    47  001A                     	;# 
    48  001B                     	;# 
    49  001B                     	;# 
    50  001C                     	;# 
    51  001D                     	;# 
    52  001E                     	;# 
    53  001F                     	;# 
    54  0081                     	;# 
    55  0085                     	;# 
    56  0086                     	;# 
    57  0087                     	;# 
    58  0088                     	;# 
    59  0089                     	;# 
    60  008C                     	;# 
    61  008D                     	;# 
    62  008E                     	;# 
    63  0091                     	;# 
    64  0092                     	;# 
    65  0093                     	;# 
    66  0094                     	;# 
    67  0098                     	;# 
    68  0099                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010D                     	;# 
    75  010E                     	;# 
    76  010F                     	;# 
    77  018C                     	;# 
    78  018D                     	;# 
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199                           
   200                           	psect	idataCOMMON
   201  0000                     __pidataCOMMON:	
   202  0005                     _PORTAbits	set	5
   203  0006                     _PORTBbits	set	6
   204  0008                     _PORTD	set	8
   205  009F                     _ADCON1bits	set	159
   206  0085                     _TRISAbits	set	133
   207  0086                     _TRISBbits	set	134
   208  0088                     _TRISD	set	136
   209                           
   210                           ; #config settings
   211  0000                     
   212                           	psect	cinit
   213  000F                     start_initialization:	
   214  000F                     __initialization:	
   215  000F  3020               	movlw	low __pbssBANK0
   216                           
   217                           ; Clear objects allocated to COMMON
   218  0010  01F6               	clrf	__pbssCOMMON& (0+127)
   219  0011  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   220  0012  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   221  0013  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   222  0014  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   223                           
   224                           ; Clear objects allocated to BANK0
   225  0015  1383               	bcf	3,7	;select IRP bank0
   226  0016  0084               	movwf	4
   227  0017  3042               	movlw	low (__pbssBANK0+34)
   228  0018  120A  118A  2217   	fcall	clear_ram0
   229                           
   230                           ;initializer for _LcdStatus
   231  001B  3001               	movlw	1
   232  001C  00FB               	movwf	__pdataCOMMON& (0+127)
   233  001D                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236  001D                     __end_of__initialization:	
   237  001D  0183               	clrf	3
   238  001E  120A  118A  2990   	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	bssCOMMON
   241  0076                     __pbssCOMMON:	
   242  0076                     _LcdCursorPos:	
   243  0076                     	ds	1
   244  0077                     _LcdCursorType:	
   245  0077                     	ds	1
   246  0078                     _LcdPos:	
   247  0078                     	ds	1
   248  0079                     _ch:	
   249  0079                     	ds	1
   250  007A                     mwait@cc:	
   251  007A                     	ds	1
   252                           
   253                           	psect	dataCOMMON
   254  007B                     __pdataCOMMON:	
   255  007B                     _LcdStatus:	
   256  007B                     	ds	1
   257                           
   258                           	psect	bssBANK0
   259  0020                     __pbssBANK0:	
   260  0020                     _LcdText:	
   261  0020                     	ds	33
   262  0041                     _uchp:	
   263  0041                     	ds	1
   264                           
   265                           	psect	clrtext
   266  0217                     clear_ram0:	
   267                           ;	Called with FSR containing the base address, and
   268                           ;	W with the last address+1
   269                           
   270  0217  0064               	clrwdt	;clear the watchdog before getting into this loop
   271  0218                     clrloop0:	
   272  0218  0180               	clrf	0	;clear RAM location pointed to by FSR
   273  0219  0A84               	incf	4,f	;increment pointer
   274  021A  0604               	xorwf	4,w	;XOR with final address
   275  021B  1903               	btfsc	3,2	;have we reached the end yet?
   276  021C  3400               	retlw	0	;all done for this memory range, return
   277  021D  0604               	xorwf	4,w	;XOR again to restore value
   278  021E  2A18               	goto	clrloop0	;do the next byte
   279                           
   280                           	psect	cstackCOMMON
   281  0070                     __pcstackCOMMON:	
   282  0070                     ?_DelayMs:	
   283  0070                     ?_DelayLcd:	
   284                           ; 0 bytes @ 0x0
   285                           
   286  0070                     ?_LcdWrite:	
   287                           ; 0 bytes @ 0x0
   288                           
   289  0070                     ?_LcdInit:	
   290                           ; 0 bytes @ 0x0
   291                           
   292  0070                     ?_LcdProcess:	
   293                           ; 0 bytes @ 0x0
   294                           
   295  0070                     ?_LcdRefreshAll:	
   296                           ; 0 bytes @ 0x0
   297                           
   298  0070                     ?_mwait:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0070                     ?_main:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0070                     ?_isr:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0070                     ??_isr:	
   308                           ; 0 bytes @ 0x0
   309                           
   310                           
   311                           ; 0 bytes @ 0x0
   312  0070                     	ds	2
   313  0072                     ??_DelayMs:	
   314  0072                     ??_DelayLcd:	
   315                           ; 0 bytes @ 0x2
   316                           
   317  0072                     ??_LcdWrite:	
   318                           ; 0 bytes @ 0x2
   319                           
   320  0072                     ??_mwait:	
   321                           ; 0 bytes @ 0x2
   322                           
   323  0072                     DelayMs@ms:	
   324                           ; 0 bytes @ 0x2
   325                           
   326  0072                     DelayLcd@cl:	
   327                           ; 1 bytes @ 0x2
   328                           
   329                           
   330                           ; 1 bytes @ 0x2
   331  0072                     	ds	1
   332  0073                     DelayMs@dl:	
   333                           
   334                           ; 2 bytes @ 0x3
   335  0073                     	ds	1
   336  0074                     ??_LcdProcess:	
   337  0074                     ??_LcdRefreshAll:	
   338                           ; 0 bytes @ 0x4
   339                           
   340                           
   341                           ; 0 bytes @ 0x4
   342  0074                     	ds	1
   343  0075                     LcdInit@i:	
   344                           
   345                           ; 1 bytes @ 0x5
   346  0075                     	ds	1
   347  0076                     ??_main:	
   348                           
   349                           	psect	cstackBANK0
   350  0042                     __pcstackBANK0:	
   351                           ; 0 bytes @ 0x6
   352                           
   353  0042                     ??_LcdInit:	
   354  0042                     mwait@dh:	
   355                           ; 0 bytes @ 0x0
   356                           
   357                           
   358                           ; 2 bytes @ 0x0
   359  0042                     	ds	2
   360  0044                     mwait@dl:	
   361                           
   362                           ; 2 bytes @ 0x2
   363  0044                     	ds	2
   364                           
   365                           	psect	maintext
   366  0190                     __pmaintext:	
   367 ;;
   368 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   369 ;;
   370 ;; *************** function _main *****************
   371 ;; Defined at:
   372 ;;		line 81 in file "../cursor-demo-htc.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;		None
   375 ;; Auto vars:     Size  Location     Type
   376 ;;  c               1    0        unsigned char 
   377 ;; Return value:  Size  Location     Type
   378 ;;		None               void
   379 ;; Registers used:
   380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   381 ;; Tracked objects:
   382 ;;		On entry : 17F/0
   383 ;;		On exit  : 100/0
   384 ;;		Unchanged: 0/0
   385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   386 ;;      Params:         0       0       0       0       0
   387 ;;      Locals:         0       0       0       0       0
   388 ;;      Temps:          0       0       0       0       0
   389 ;;      Totals:         0       0       0       0       0
   390 ;;Total ram usage:        0 bytes
   391 ;; Hardware stack levels required when called:    4
   392 ;; This function calls:
   393 ;;		_LcdInit
   394 ;;		_LcdRefreshAll
   395 ;;		_mwait
   396 ;; This function is called by:
   397 ;;		Startup code after reset
   398 ;; This function uses a non-reentrant model
   399 ;;
   400                           
   401                           
   402                           ;psect for function _main
   403  0190                     _main:	
   404                           
   405                           ;cursor-demo-htc.c: 83: unsigned char c;
   406                           ;cursor-demo-htc.c: 87: ADCON1bits.PCFG = 0b1110;
   407                           
   408                           ;incstack = 0
   409                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   410  0190  1683               	bsf	3,5	;RP0=1, select bank1
   411  0191  081F               	movf	31,w	;volatile
   412  0192  39F0               	andlw	-16
   413  0193  380E               	iorlw	14
   414  0194  009F               	movwf	31	;volatile
   415                           
   416                           ;cursor-demo-htc.c: 94: PORTBbits.RB0 = 0; TRISBbits.TRISB0 = 0;
   417  0195  1283               	bcf	3,5	;RP0=0, select bank0
   418  0196  1006               	bcf	6,0	;volatile
   419  0197  1683               	bsf	3,5	;RP0=1, select bank1
   420  0198  1006               	bcf	6,0	;volatile
   421                           
   422                           ;cursor-demo-htc.c: 97: PORTBbits.RB1 = 0; TRISBbits.TRISB1 = 0;
   423  0199  1283               	bcf	3,5	;RP0=0, select bank0
   424  019A  1086               	bcf	6,1	;volatile
   425  019B  1683               	bsf	3,5	;RP0=1, select bank1
   426  019C  1086               	bcf	6,1	;volatile
   427                           
   428                           ;cursor-demo-htc.c: 98: PORTBbits.RB2 = 0; TRISBbits.TRISB2 = 0;
   429  019D  1283               	bcf	3,5	;RP0=0, select bank0
   430  019E  1106               	bcf	6,2	;volatile
   431  019F  1683               	bsf	3,5	;RP0=1, select bank1
   432  01A0  1106               	bcf	6,2	;volatile
   433                           
   434                           ;cursor-demo-htc.c: 99: PORTBbits.RB3 = 0; TRISBbits.TRISB3 = 0;
   435  01A1  1283               	bcf	3,5	;RP0=0, select bank0
   436  01A2  1186               	bcf	6,3	;volatile
   437  01A3  1683               	bsf	3,5	;RP0=1, select bank1
   438  01A4  1186               	bcf	6,3	;volatile
   439                           
   440                           ;cursor-demo-htc.c: 102: LcdInit();
   441  01A5  120A  118A  202D  120A  118A  	fcall	_LcdInit
   442  01AA                     l1290:	
   443                           
   444                           ;cursor-demo-htc.c: 105: {
   445                           ;cursor-demo-htc.c: 106: if(LcdCursorPos >= 2 * 16) LcdCursorPos = 0;
   446  01AA  3020               	movlw	32
   447  01AB  0276               	subwf	_LcdCursorPos,w	;volatile
   448  01AC  1803               	btfsc	3,0
   449  01AD  01F6               	clrf	_LcdCursorPos	;volatile
   450                           
   451                           ;cursor-demo-htc.c: 107: LcdRefreshAll();
   452  01AE  120A  118A  2021  120A  118A  	fcall	_LcdRefreshAll
   453                           
   454                           ;cursor-demo-htc.c: 109: mwait();
   455  01B3  120A  118A  21DF  120A  118A  	fcall	_mwait
   456                           
   457                           ;cursor-demo-htc.c: 110: LcdCursorPos++;
   458  01B8  0AF6               	incf	_LcdCursorPos,f	;volatile
   459                           
   460                           ;cursor-demo-htc.c: 111: LcdCursorType &= ~2;
   461  01B9  10F7               	bcf	_LcdCursorType,1	;volatile
   462                           
   463                           ;cursor-demo-htc.c: 112: LcdRefreshAll();
   464  01BA  120A  118A  2021  120A  118A  	fcall	_LcdRefreshAll
   465                           
   466                           ;cursor-demo-htc.c: 114: mwait();
   467  01BF  120A  118A  21DF  120A  118A  	fcall	_mwait
   468                           
   469                           ;cursor-demo-htc.c: 115: LcdCursorPos++;
   470  01C4  0AF6               	incf	_LcdCursorPos,f	;volatile
   471                           
   472                           ;cursor-demo-htc.c: 116: LcdCursorType |= 2;
   473  01C5  14F7               	bsf	_LcdCursorType,1	;volatile
   474                           
   475                           ;cursor-demo-htc.c: 117: LcdRefreshAll();
   476  01C6  120A  118A  2021  120A  118A  	fcall	_LcdRefreshAll
   477                           
   478                           ;cursor-demo-htc.c: 119: mwait();
   479  01CB  120A  118A  21DF  120A  118A  	fcall	_mwait
   480                           
   481                           ;cursor-demo-htc.c: 120: LcdCursorPos++;
   482  01D0  0AF6               	incf	_LcdCursorPos,f	;volatile
   483                           
   484                           ;cursor-demo-htc.c: 121: LcdCursorType |= 1;
   485  01D1  1477               	bsf	_LcdCursorType,0	;volatile
   486                           
   487                           ;cursor-demo-htc.c: 122: LcdRefreshAll();
   488  01D2  120A  118A  2021  120A  118A  	fcall	_LcdRefreshAll
   489                           
   490                           ;cursor-demo-htc.c: 124: mwait();
   491  01D7  120A  118A  21DF  120A  118A  	fcall	_mwait
   492                           
   493                           ;cursor-demo-htc.c: 125: LcdCursorPos++;
   494  01DC  0AF6               	incf	_LcdCursorPos,f	;volatile
   495                           
   496                           ;cursor-demo-htc.c: 126: LcdCursorType &= ~1;
   497  01DD  1077               	bcf	_LcdCursorType,0	;volatile
   498  01DE  29AA               	goto	l1290
   499  01DF                     __end_of_main:	
   500                           
   501                           	psect	text1
   502  01DF                     __ptext1:	
   503 ;; *************** function _mwait *****************
   504 ;; Defined at:
   505 ;;		line 45 in file "../cursor-demo-htc.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;  dl              2    2[BANK0 ] volatile unsigned int 
   510 ;;  dh              2    0[BANK0 ] volatile unsigned int 
   511 ;; Return value:  Size  Location     Type
   512 ;;		None               void
   513 ;; Registers used:
   514 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   515 ;; Tracked objects:
   516 ;;		On entry : 0/20
   517 ;;		On exit  : 100/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   520 ;;      Params:         0       0       0       0       0
   521 ;;      Locals:         0       4       0       0       0
   522 ;;      Temps:          1       0       0       0       0
   523 ;;      Totals:         1       4       0       0       0
   524 ;;Total ram usage:        5 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; Hardware stack levels required when called:    1
   527 ;; This function calls:
   528 ;;		Nothing
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           
   535                           ;psect for function _mwait
   536  01DF                     _mwait:	
   537                           
   538                           ;cursor-demo-htc.c: 48: static unsigned char cc;
   539                           ;cursor-demo-htc.c: 49: volatile unsigned int dh, dl;
   540                           ;cursor-demo-htc.c: 52: if(PORTBbits.RB0)
   541                           
   542                           ;incstack = 0
   543                           ; Regs used in _mwait: [wreg-fsr0h+status,2+status,0]
   544  01DF  1283               	bcf	3,5	;RP0=0, select bank0
   545  01E0  1303               	bcf	3,6	;RP1=0, select bank0
   546  01E1  1C06               	btfss	6,0	;volatile
   547  01E2  29E6               	goto	l105
   548                           
   549                           ;cursor-demo-htc.c: 53: {
   550                           ;cursor-demo-htc.c: 54: PORTBbits.RB0 = 0;
   551  01E3  1006               	bcf	6,0	;volatile
   552                           
   553                           ;cursor-demo-htc.c: 56: PORTBbits.RB1 = 1;
   554  01E4  1486               	bsf	6,1	;volatile
   555                           
   556                           ;cursor-demo-htc.c: 58: }
   557  01E5  29E8               	goto	l1252
   558  01E6                     l105:	
   559                           
   560                           ;cursor-demo-htc.c: 59: else
   561                           ;cursor-demo-htc.c: 60: {
   562                           ;cursor-demo-htc.c: 61: PORTBbits.RB0 = 1;
   563  01E6  1406               	bsf	6,0	;volatile
   564                           
   565                           ;cursor-demo-htc.c: 63: PORTBbits.RB1 = 0;
   566  01E7  1086               	bcf	6,1	;volatile
   567  01E8                     l1252:	
   568                           
   569                           ;cursor-demo-htc.c: 65: }
   570                           ;cursor-demo-htc.c: 68: dh = 1000;
   571  01E8  30E8               	movlw	232
   572  01E9  00C2               	movwf	mwait@dh	;volatile
   573  01EA  3003               	movlw	3
   574  01EB  00C3               	movwf	mwait@dh+1	;volatile
   575  01EC                     l1258:	
   576                           ;cursor-demo-htc.c: 69: while(dh--)
   577                           
   578  01EC  3001               	movlw	1
   579  01ED  02C2               	subwf	mwait@dh,f	;volatile
   580  01EE  3000               	movlw	0
   581  01EF  1C03               	skipc
   582  01F0  03C3               	decf	mwait@dh+1,f	;volatile
   583  01F1  02C3               	subwf	mwait@dh+1,f	;volatile
   584  01F2  0A42               	incf	mwait@dh,w	;volatile
   585  01F3  1903               	skipnz
   586  01F4  0A43               	incf	mwait@dh+1,w	;volatile
   587  01F5  1903               	btfsc	3,2
   588  01F6  2A07               	goto	l1260
   589                           
   590                           ;cursor-demo-htc.c: 70: {
   591                           ;cursor-demo-htc.c: 71: dl = (10000000/1000/14);
   592  01F7  30CA               	movlw	202
   593  01F8  00C4               	movwf	mwait@dl	;volatile
   594  01F9  3002               	movlw	2
   595  01FA  00C5               	movwf	mwait@dl+1	;volatile
   596  01FB                     l1256:	
   597                           ;cursor-demo-htc.c: 72: while(dl--);
   598                           
   599  01FB  3001               	movlw	1
   600  01FC  02C4               	subwf	mwait@dl,f	;volatile
   601  01FD  3000               	movlw	0
   602  01FE  1C03               	skipc
   603  01FF  03C5               	decf	mwait@dl+1,f	;volatile
   604  0200  02C5               	subwf	mwait@dl+1,f	;volatile
   605  0201  0A44               	incf	mwait@dl,w	;volatile
   606  0202  1903               	skipnz
   607  0203  0A45               	incf	mwait@dl+1,w	;volatile
   608  0204  1903               	btfsc	3,2
   609  0205  29EC               	goto	l1258
   610  0206  29FB               	goto	l1256
   611  0207                     l1260:	
   612                           
   613                           ;cursor-demo-htc.c: 73: }
   614                           ;cursor-demo-htc.c: 75: LcdText[0]++;
   615  0207  0AA0               	incf	_LcdText,f	;volatile
   616                           
   617                           ;cursor-demo-htc.c: 76: for(cc = 0; cc < sizeof(LcdText) - 2; cc++)
   618  0208  01FA               	clrf	mwait@cc
   619  0209                     l1266:	
   620                           
   621                           ;cursor-demo-htc.c: 77: LcdText[cc + 1] = LcdText[cc] + 1;
   622  0209  087A               	movf	mwait@cc,w
   623  020A  3E20               	addlw	_LcdText& (0+255)
   624  020B  0084               	movwf	4
   625  020C  1383               	bcf	3,7	;select IRP bank0
   626  020D  0800               	movf	0,w
   627  020E  3E01               	addlw	1
   628  020F  00F2               	movwf	??_mwait
   629  0210  087A               	movf	mwait@cc,w
   630  0211  3E21               	addlw	(_LcdText+1)& (0+255)
   631  0212  0084               	movwf	4
   632  0213  0872               	movf	??_mwait,w
   633  0214  0080               	movwf	0
   634  0215  0AFA               	incf	mwait@cc,f
   635  0216  2A09               	goto	l1266
   636  0217                     __end_of_mwait:	
   637                           
   638                           	psect	text2
   639  0021                     __ptext2:	
   640 ;; *************** function _LcdRefreshAll *****************
   641 ;; Defined at:
   642 ;;		line 1611 in file "../charlcd.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;		None
   645 ;; Auto vars:     Size  Location     Type
   646 ;;		None
   647 ;; Return value:  Size  Location     Type
   648 ;;		None               void
   649 ;; Registers used:
   650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : 100/20
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   656 ;;      Params:         0       0       0       0       0
   657 ;;      Locals:         0       0       0       0       0
   658 ;;      Temps:          0       0       0       0       0
   659 ;;      Totals:         0       0       0       0       0
   660 ;;Total ram usage:        0 bytes
   661 ;; Hardware stack levels used:    1
   662 ;; Hardware stack levels required when called:    3
   663 ;; This function calls:
   664 ;;		_DelayLcd
   665 ;;		_LcdProcess
   666 ;; This function is called by:
   667 ;;		_main
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           
   672                           ;psect for function _LcdRefreshAll
   673  0021                     _LcdRefreshAll:	
   674                           
   675                           ;charlcd.c: 1644: LcdStatus = HOME;
   676                           
   677                           ;incstack = 0
   678                           ; Regs used in _LcdRefreshAll: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   679  0021  01FB               	clrf	_LcdStatus
   680  0022                     l1100:	
   681                           ;charlcd.c: 1645: while(LcdStatus != REFREND)
   682                           
   683  0022  087B               	movf	_LcdStatus,w
   684  0023  3A09               	xorlw	9
   685  0024  1903               	btfsc	3,2
   686  0025  0008               	return
   687                           
   688                           ;charlcd.c: 1646: {
   689                           ;charlcd.c: 1647: DelayLcd();
   690  0026  2184  120A  118A   	fcall	_DelayLcd
   691                           
   692                           ;charlcd.c: 1648: LcdProcess();
   693  0029  20DA  120A  118A   	fcall	_LcdProcess
   694  002C  2822               	goto	l1100
   695  002D                     __end_of_LcdRefreshAll:	
   696  002D                     __ptext5:	
   697 ;; *************** function _LcdInit *****************
   698 ;; Defined at:
   699 ;;		line 957 in file "../charlcd.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;		None
   702 ;; Auto vars:     Size  Location     Type
   703 ;;  i               1    5[COMMON] unsigned char 
   704 ;; Return value:  Size  Location     Type
   705 ;;		None               void
   706 ;; Registers used:
   707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 17F/20
   710 ;;		On exit  : 140/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   713 ;;      Params:         0       0       0       0       0
   714 ;;      Locals:         1       0       0       0       0
   715 ;;      Temps:          0       2       0       0       0
   716 ;;      Totals:         1       2       0       0       0
   717 ;;Total ram usage:        3 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; Hardware stack levels required when called:    2
   720 ;; This function calls:
   721 ;;		_DelayMs
   722 ;;		_LcdWrite
   723 ;; This function is called by:
   724 ;;		_main
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           
   729                           ;psect for function _LcdInit
   730  002D                     _LcdInit:	
   731                           
   732                           ;charlcd.c: 959: unsigned char i;
   733                           ;charlcd.c: 961: PORTAbits.RA1 = 0;
   734                           
   735                           ;incstack = 0
   736                           ; Regs used in _LcdInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   737  002D  1283               	bcf	3,5	;RP0=0, select bank0
   738  002E  1085               	bcf	5,1	;volatile
   739                           
   740                           ;charlcd.c: 962: TRISAbits.TRISA1 = 0;
   741  002F  1683               	bsf	3,5	;RP0=1, select bank1
   742  0030  1085               	bcf	5,1	;volatile
   743                           
   744                           ;charlcd.c: 969: PORTAbits.RA3 = 0;
   745  0031  1283               	bcf	3,5	;RP0=0, select bank0
   746  0032  1185               	bcf	5,3	;volatile
   747                           
   748                           ;charlcd.c: 970: TRISAbits.TRISA3 = 0;
   749  0033  1683               	bsf	3,5	;RP0=1, select bank1
   750  0034  1185               	bcf	5,3	;volatile
   751                           
   752                           ;charlcd.c: 974: PORTAbits.RA2 = 0;
   753  0035  1283               	bcf	3,5	;RP0=0, select bank0
   754  0036  1105               	bcf	5,2	;volatile
   755                           
   756                           ;charlcd.c: 975: TRISAbits.TRISA2 = 0;
   757  0037  1683               	bsf	3,5	;RP0=1, select bank1
   758  0038  1105               	bcf	5,2	;volatile
   759                           
   760                           ;charlcd.c: 979: ch.chr = 0b00000000;
   761  0039  01F9               	clrf	_ch	;volatile
   762                           
   763                           ;charlcd.c: 980: PORTD = (PORTD & ~(0b00001111 << 0)) | (((ch.chr >> 4) & 0b00001111) <<
      +                           0);
   764  003A  0879               	movf	_ch,w	;volatile
   765  003B  1283               	bcf	3,5	;RP0=0, select bank0
   766  003C  00C2               	movwf	??_LcdInit
   767  003D  3004               	movlw	4
   768  003E                     u475:	
   769  003E  1003               	clrc
   770  003F  0CC2               	rrf	??_LcdInit,f
   771  0040  3EFF               	addlw	-1
   772  0041  1D03               	skipz
   773  0042  283E               	goto	u475
   774  0043  300F               	movlw	15
   775  0044  2189  120A  118A   	fcall	PL2	;call to abstracted procedure
   776                           
   777                           ;charlcd.c: 981: TRISD &= ~(0x0F << 0);
   778  0047  30F0               	movlw	240
   779  0048  1683               	bsf	3,5	;RP0=1, select bank1
   780  0049  0588               	andwf	8,f	;volatile
   781                           
   782                           ;charlcd.c: 982: DelayMs(100);
   783  004A  3064               	movlw	100
   784  004B  20C5  120A  118A   	fcall	_DelayMs
   785                           
   786                           ;charlcd.c: 983: ch.chr = 0b00110000;
   787  004E  3030               	movlw	48
   788  004F  00F9               	movwf	_ch	;volatile
   789                           
   790                           ;charlcd.c: 984: PORTD = (PORTD & ~(0b00001111 << 0)) | (((ch.chr >> 4) & 0b00001111) <<
      +                           0);
   791  0050  0879               	movf	_ch,w	;volatile
   792  0051  1283               	bcf	3,5	;RP0=0, select bank0
   793  0052  00C2               	movwf	??_LcdInit
   794  0053  3004               	movlw	4
   795  0054                     u485:	
   796  0054  1003               	clrc
   797  0055  0CC2               	rrf	??_LcdInit,f
   798  0056  3EFF               	addlw	-1
   799  0057  1D03               	skipz
   800  0058  2854               	goto	u485
   801  0059  300F               	movlw	15
   802  005A  2189  120A  118A   	fcall	PL2	;call to abstracted procedure
   803                           
   804                           ;charlcd.c: 985: {PORTAbits.RA1 = 1; __nop(); PORTAbits.RA1 = 0;};
   805  005D  1485               	bsf	5,1	;volatile
   806  005E  0000               	nop
   807  005F  1283               	bcf	3,5	;RP0=0, select bank0
   808  0060  1303               	bcf	3,6	;RP1=0, select bank0
   809  0061  1085               	bcf	5,1	;volatile
   810                           
   811                           ;charlcd.c: 986: DelayMs(5);
   812  0062  3005               	movlw	5
   813  0063  20C5  120A  118A   	fcall	_DelayMs
   814                           
   815                           ;charlcd.c: 987: {PORTAbits.RA1 = 1; __nop(); PORTAbits.RA1 = 0;};
   816  0066  1283               	bcf	3,5	;RP0=0, select bank0
   817  0067  1485               	bsf	5,1	;volatile
   818  0068  0000               	nop
   819  0069  1283               	bcf	3,5	;RP0=0, select bank0
   820  006A  1303               	bcf	3,6	;RP1=0, select bank0
   821  006B  1085               	bcf	5,1	;volatile
   822                           
   823                           ;charlcd.c: 988: DelayMs(5);
   824  006C  3005               	movlw	5
   825  006D  20C5  120A  118A   	fcall	_DelayMs
   826                           
   827                           ;charlcd.c: 989: {PORTAbits.RA1 = 1; __nop(); PORTAbits.RA1 = 0;};
   828  0070  1283               	bcf	3,5	;RP0=0, select bank0
   829  0071  1485               	bsf	5,1	;volatile
   830  0072  0000               	nop
   831  0073  1283               	bcf	3,5	;RP0=0, select bank0
   832  0074  1303               	bcf	3,6	;RP1=0, select bank0
   833  0075  1085               	bcf	5,1	;volatile
   834                           
   835                           ;charlcd.c: 990: DelayMs(5);
   836  0076  3005               	movlw	5
   837  0077  20C5  120A  118A   	fcall	_DelayMs
   838                           
   839                           ;charlcd.c: 991: ch.chr = 0b00100000;
   840  007A  3020               	movlw	32
   841  007B  00F9               	movwf	_ch	;volatile
   842                           
   843                           ;charlcd.c: 992: PORTD = (PORTD & ~(0b00001111 << 0)) | (((ch.chr >> 4) & 0b00001111) <<
      +                           0);
   844  007C  0879               	movf	_ch,w	;volatile
   845  007D  1283               	bcf	3,5	;RP0=0, select bank0
   846  007E  00C2               	movwf	??_LcdInit
   847  007F  3004               	movlw	4
   848  0080                     u495:	
   849  0080  1003               	clrc
   850  0081  0CC2               	rrf	??_LcdInit,f
   851  0082  3EFF               	addlw	-1
   852  0083  1D03               	skipz
   853  0084  2880               	goto	u495
   854  0085  300F               	movlw	15
   855  0086  2189  120A  118A   	fcall	PL2	;call to abstracted procedure
   856                           
   857                           ;charlcd.c: 993: {PORTAbits.RA1 = 1; __nop(); PORTAbits.RA1 = 0;};
   858  0089  1485               	bsf	5,1	;volatile
   859  008A  0000               	nop
   860  008B  1283               	bcf	3,5	;RP0=0, select bank0
   861  008C  1303               	bcf	3,6	;RP1=0, select bank0
   862  008D  1085               	bcf	5,1	;volatile
   863                           
   864                           ;charlcd.c: 994: DelayMs(5);
   865  008E  3005               	movlw	5
   866  008F  20C5  120A  118A   	fcall	_DelayMs
   867                           
   868                           ;charlcd.c: 996: ch.chr = 0b00101000;
   869  0092  3028               	movlw	40
   870  0093  00F9               	movwf	_ch	;volatile
   871                           
   872                           ;charlcd.c: 998: LcdWrite();
   873  0094  2161  120A  118A   	fcall	_LcdWrite
   874                           
   875                           ;charlcd.c: 999: ;;
   876                           ;charlcd.c: 1021: DelayMs(2);
   877  0097  3002               	movlw	2
   878  0098  20C5  120A  118A   	fcall	_DelayMs
   879                           
   880                           ;charlcd.c: 1022: ch.chr = 0b00001100;
   881  009B  300C               	movlw	12
   882  009C  00F9               	movwf	_ch	;volatile
   883                           
   884                           ;charlcd.c: 1023: LcdWrite();
   885  009D  2161  120A  118A   	fcall	_LcdWrite
   886                           
   887                           ;charlcd.c: 1024: ;;
   888                           ;charlcd.c: 1026: DelayMs(2);
   889  00A0  3002               	movlw	2
   890  00A1  20C5  120A  118A   	fcall	_DelayMs
   891                           
   892                           ;charlcd.c: 1027: ch.chr = 0b00000001;
   893  00A4  3001               	movlw	1
   894  00A5  00F9               	movwf	_ch	;volatile
   895                           
   896                           ;charlcd.c: 1028: LcdWrite();
   897  00A6  2161  120A  118A   	fcall	_LcdWrite
   898                           
   899                           ;charlcd.c: 1029: ;;
   900                           ;charlcd.c: 1031: DelayMs(2);
   901  00A9  3002               	movlw	2
   902  00AA  20C5  120A  118A   	fcall	_DelayMs
   903                           
   904                           ;charlcd.c: 1032: ch.chr = 0b00000110;
   905  00AD  3006               	movlw	6
   906  00AE  00F9               	movwf	_ch	;volatile
   907                           
   908                           ;charlcd.c: 1033: LcdWrite();
   909  00AF  2161  120A  118A   	fcall	_LcdWrite
   910                           
   911                           ;charlcd.c: 1034: ;;
   912                           ;charlcd.c: 1035: DelayMs(2);
   913  00B2  3002               	movlw	2
   914  00B3  20C5  120A  118A   	fcall	_DelayMs
   915                           
   916                           ;charlcd.c: 1062: PORTAbits.RA3 = 1;
   917  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   918  00B7  1585               	bsf	5,3	;volatile
   919                           
   920                           ;charlcd.c: 1068: for(i = 0; i < (1UL * 16 * 2); i++) LcdText[i] = ' ';
   921  00B8  01F5               	clrf	LcdInit@i
   922  00B9                     l1240:	
   923  00B9  0875               	movf	LcdInit@i,w
   924  00BA  3E20               	addlw	_LcdText& (0+255)
   925  00BB  0084               	movwf	4
   926  00BC  3020               	movlw	32
   927  00BD  1383               	bcf	3,7	;select IRP bank0
   928  00BE  0080               	movwf	0
   929  00BF  0AF5               	incf	LcdInit@i,f
   930  00C0  0275               	subwf	LcdInit@i,w
   931  00C1  1C03               	skipc
   932  00C2  28B9               	goto	l1240
   933                           
   934                           ;charlcd.c: 1080: LcdPos = 0;
   935  00C3  01F8               	clrf	_LcdPos	;volatile
   936  00C4  0008               	return
   937  00C5                     __end_of_LcdInit:	
   938  00C5                     __ptext7:	
   939 ;; *************** function _DelayMs *****************
   940 ;; Defined at:
   941 ;;		line 748 in file "../charlcd.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;  ms              1    wreg     unsigned char 
   944 ;; Auto vars:     Size  Location     Type
   945 ;;  ms              1    2[COMMON] unsigned char 
   946 ;;  dl              2    3[COMMON] volatile unsigned int 
   947 ;; Return value:  Size  Location     Type
   948 ;;		None               void
   949 ;; Registers used:
   950 ;;		wreg, status,2, status,0
   951 ;; Tracked objects:
   952 ;;		On entry : 40/20
   953 ;;		On exit  : 40/0
   954 ;;		Unchanged: 40/0
   955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   956 ;;      Params:         0       0       0       0       0
   957 ;;      Locals:         3       0       0       0       0
   958 ;;      Temps:          0       0       0       0       0
   959 ;;      Totals:         3       0       0       0       0
   960 ;;Total ram usage:        3 bytes
   961 ;; Hardware stack levels used:    1
   962 ;; Hardware stack levels required when called:    1
   963 ;; This function calls:
   964 ;;		Nothing
   965 ;; This function is called by:
   966 ;;		_LcdInit
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           
   971                           ;psect for function _DelayMs
   972  00C5                     _DelayMs:	
   973                           
   974                           ;incstack = 0
   975                           ; Regs used in _DelayMs: [wreg+status,2+status,0]
   976                           ;DelayMs@ms stored from wreg
   977  00C5  00F2               	movwf	DelayMs@ms
   978  00C6                     l602:	
   979                           ;charlcd.c: 750: volatile unsigned int dl;
   980                           ;charlcd.c: 753: while(ms--)
   981                           
   982  00C6  03F2               	decf	DelayMs@ms,f
   983  00C7  0872               	movf	DelayMs@ms,w
   984  00C8  3AFF               	xorlw	255
   985  00C9  1903               	btfsc	3,2
   986  00CA  0008               	return
   987                           
   988                           ;charlcd.c: 754: {
   989                           ;charlcd.c: 755: dl = ((1UL*10000000/4)/1000/10);
   990  00CB  30FA               	movlw	250
   991  00CC  00F3               	movwf	DelayMs@dl	;volatile
   992  00CD  01F4               	clrf	DelayMs@dl+1	;volatile
   993  00CE                     l600:	
   994                           ;charlcd.c: 756: while(dl--);
   995                           
   996  00CE  3001               	movlw	1
   997  00CF  02F3               	subwf	DelayMs@dl,f	;volatile
   998  00D0  3000               	movlw	0
   999  00D1  1C03               	skipc
  1000  00D2  03F4               	decf	DelayMs@dl+1,f	;volatile
  1001  00D3  02F4               	subwf	DelayMs@dl+1,f	;volatile
  1002  00D4  0A73               	incf	DelayMs@dl,w	;volatile
  1003  00D5  1903               	skipnz
  1004  00D6  0A74               	incf	DelayMs@dl+1,w	;volatile
  1005  00D7  1903               	btfsc	3,2
  1006  00D8  28C6               	goto	l602
  1007  00D9  28CE               	goto	l600
  1008  00DA                     __end_of_DelayMs:	
  1009  00DA                     __ptext3:	
  1010 ;; *************** function _LcdProcess *****************
  1011 ;; Defined at:
  1012 ;;		line 1118 in file "../charlcd.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;		None
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;		None
  1017 ;; Return value:  Size  Location     Type
  1018 ;;		None               void
  1019 ;; Registers used:
  1020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/20
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1026 ;;      Params:         0       0       0       0       0
  1027 ;;      Locals:         0       0       0       0       0
  1028 ;;      Temps:          0       0       0       0       0
  1029 ;;      Totals:         0       0       0       0       0
  1030 ;;Total ram usage:        0 bytes
  1031 ;; Hardware stack levels used:    1
  1032 ;; Hardware stack levels required when called:    2
  1033 ;; This function calls:
  1034 ;;		_LcdWrite
  1035 ;; This function is called by:
  1036 ;;		_LcdRefreshAll
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           
  1041                           ;psect for function _LcdProcess
  1042  00DA                     _LcdProcess:	
  1043                           
  1044                           ;charlcd.c: 1142: if(LcdStatus == LCHAR)
  1045                           
  1046                           ;incstack = 0
  1047                           ; Regs used in _LcdProcess: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1048  00DA  0B7B               	decfsz	_LcdStatus,w
  1049  00DB  28FC               	goto	l922
  1050                           
  1051                           ;charlcd.c: 1143: {
  1052                           ;charlcd.c: 1144: PORTAbits.RA3 = 1;
  1053  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1054  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1055  00DE  1585               	bsf	5,3	;volatile
  1056                           
  1057                           ;charlcd.c: 1146: ch.chr = LcdText[LcdPos];
  1058  00DF  0878               	movf	_LcdPos,w
  1059  00E0  3E20               	addlw	_LcdText& (0+255)
  1060  00E1  0084               	movwf	4
  1061  00E2  1383               	bcf	3,7	;select IRP bank0
  1062  00E3  0800               	movf	0,w
  1063  00E4  00F9               	movwf	_ch	;volatile
  1064                           
  1065                           ;charlcd.c: 1149: if (ch.chr == 0)
  1066  00E5  08F9               	movf	_ch,f	;volatile
  1067  00E6  1D03               	skipz
  1068  00E7  28EA               	goto	l910
  1069                           
  1070                           ;charlcd.c: 1150: {
  1071                           ;charlcd.c: 1151: ch.chr = ' ';
  1072  00E8  3020               	movlw	32
  1073  00E9  00F9               	movwf	_ch	;volatile
  1074  00EA                     l910:	
  1075                           
  1076                           ;charlcd.c: 1155: }
  1077                           ;charlcd.c: 1163: LcdWrite();
  1078  00EA  2161  120A  118A   	fcall	_LcdWrite
  1079                           
  1080                           ;charlcd.c: 1188: LcdPos++;
  1081  00ED  0AF8               	incf	_LcdPos,f	;volatile
  1082                           
  1083                           ;charlcd.c: 1210: if(LcdPos == 16)
  1084  00EE  0878               	movf	_LcdPos,w	;volatile
  1085  00EF  3A10               	xorlw	16
  1086  00F0  1D03               	skipz
  1087  00F1  28F5               	goto	l918
  1088                           
  1089                           ;charlcd.c: 1211: {
  1090                           ;charlcd.c: 1212: LcdStatus = DDR;
  1091  00F2  3002               	movlw	2
  1092  00F3  00FB               	movwf	_LcdStatus
  1093                           
  1094                           ;charlcd.c: 1213: }
  1095  00F4  0008               	return
  1096  00F5                     l918:	
  1097                           
  1098                           ;charlcd.c: 1214: else if(LcdPos == 16 * 2)
  1099  00F5  0878               	movf	_LcdPos,w	;volatile
  1100  00F6  3A20               	xorlw	32
  1101  00F7  1D03               	skipz
  1102  00F8  0008               	return
  1103  00F9                     l920:	
  1104                           
  1105                           ;charlcd.c: 1215: {
  1106                           ;charlcd.c: 1217: LcdStatus = CURPOS;
  1107  00F9  3004               	movlw	4
  1108  00FA  00FB               	movwf	_LcdStatus
  1109                           
  1110                           ;charlcd.c: 1229: }
  1111                           ;charlcd.c: 1264: }
  1112  00FB  0008               	return
  1113  00FC                     l922:	
  1114                           
  1115                           ;charlcd.c: 1267: else if(LcdStatus == DDR)
  1116  00FC  087B               	movf	_LcdStatus,w
  1117  00FD  3A02               	xorlw	2
  1118  00FE  1D03               	skipz
  1119  00FF  2917               	goto	l940
  1120                           
  1121                           ;charlcd.c: 1268: {
  1122                           ;charlcd.c: 1270: PORTAbits.RA3 = 0;
  1123  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1124  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1125  0102  1185               	bcf	5,3	;volatile
  1126                           
  1127                           ;charlcd.c: 1282: if(LcdPos == 16)
  1128  0103  0878               	movf	_LcdPos,w	;volatile
  1129  0104  3A10               	xorlw	16
  1130  0105  1D03               	skipz
  1131  0106  2910               	goto	L2
  1132                           
  1133                           ;charlcd.c: 1283: {
  1134                           ;charlcd.c: 1284: ch.chr = 0xC0;
  1135  0107  30C0               	movlw	192
  1136  0108  00F9               	movwf	_ch	;volatile
  1137                           
  1138                           ;charlcd.c: 1285: LcdWrite();
  1139  0109  2161  120A  118A   	fcall	_LcdWrite
  1140                           
  1141                           ;charlcd.c: 1286: ;;
  1142                           ;charlcd.c: 1287: }
  1143  010C  2914               	goto	l938
  1144  010D                     l942:	
  1145                           ;charlcd.c: 1288: else
  1146                           ;charlcd.c: 1289: {
  1147                           ;charlcd.c: 1290: ch.chr = 0x80;
  1148                           
  1149                           
  1150                           ;charlcd.c: 1333: {
  1151                           ;charlcd.c: 1334: PORTAbits.RA3 = 0;
  1152  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1153  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1154  010F  1185               	bcf	5,3	;volatile
  1155  0110                     L2:	
  1156                           
  1157                           ;charlcd.c: 1335: ch.chr = 0x80;
  1158  0110  3080               	movlw	128
  1159  0111  00F9               	movwf	_ch	;volatile
  1160                           
  1161                           ;charlcd.c: 1291: LcdWrite();
  1162  0112  2161               	fcall	_LcdWrite
  1163                           
  1164                           ;charlcd.c: 1292: ;;
  1165                           ;charlcd.c: 1293: LcdPos = 0;
  1166  0113  01F8               	clrf	_LcdPos	;volatile
  1167  0114                     l938:	
  1168                           
  1169                           ;charlcd.c: 1295: }
  1170                           ;charlcd.c: 1328: LcdStatus = LCHAR;
  1171  0114  01FB               	clrf	_LcdStatus
  1172  0115  0AFB               	incf	_LcdStatus,f
  1173                           
  1174                           ;charlcd.c: 1329: }
  1175  0116  0008               	return
  1176  0117                     l940:	
  1177                           
  1178                           ;charlcd.c: 1332: else if(LcdStatus == HOME)
  1179  0117  08FB               	movf	_LcdStatus,f
  1180  0118  1903               	btfsc	3,2
  1181  0119  290D               	goto	l942
  1182                           
  1183                           ;charlcd.c: 1344: else if(LcdStatus == CURPOS)
  1184  011A  087B               	movf	_LcdStatus,w
  1185  011B  3A04               	xorlw	4
  1186  011C  1D03               	skipz
  1187  011D  292F               	goto	l966
  1188                           
  1189                           ;charlcd.c: 1345: {
  1190                           ;charlcd.c: 1346: PORTAbits.RA3 = 0;
  1191  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1192  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1193  0120  1185               	bcf	5,3	;volatile
  1194                           
  1195                           ;charlcd.c: 1375: if (LcdCursorPos < 16)
  1196  0121  3010               	movlw	16
  1197  0122  0276               	subwf	_LcdCursorPos,w	;volatile
  1198  0123  1803               	skipnc
  1199  0124  2928               	goto	l960
  1200                           
  1201                           ;charlcd.c: 1376: ch.chr = 0x80 + LcdCursorPos;
  1202  0125  0876               	movf	_LcdCursorPos,w	;volatile
  1203  0126  3E80               	addlw	128
  1204  0127  292A               	goto	L1
  1205  0128                     l960:	
  1206                           
  1207                           ;charlcd.c: 1377: else
  1208                           ;charlcd.c: 1378: ch.chr = 0xC0 - 16 + LcdCursorPos;
  1209  0128  0876               	movf	_LcdCursorPos,w	;volatile
  1210  0129  3EB0               	addlw	176
  1211  012A                     L1:	
  1212  012A  00F9               	movwf	_ch	;volatile
  1213                           
  1214                           ;charlcd.c: 1379: LcdWrite();
  1215  012B  2161               	fcall	_LcdWrite
  1216                           
  1217                           ;charlcd.c: 1450: LcdStatus = CURTYPE;
  1218  012C  3003               	movlw	3
  1219  012D  00FB               	movwf	_LcdStatus
  1220                           
  1221                           ;charlcd.c: 1451: }
  1222  012E  0008               	return
  1223  012F                     l966:	
  1224                           
  1225                           ;charlcd.c: 1454: else if(LcdStatus == CURTYPE)
  1226  012F  087B               	movf	_LcdStatus,w
  1227  0130  3A03               	xorlw	3
  1228  0131  1D03               	skipz
  1229  0132  293D               	goto	l976
  1230                           
  1231                           ;charlcd.c: 1455: {
  1232                           ;charlcd.c: 1456: PORTAbits.RA3 = 0;
  1233  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1234  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1235  0135  1185               	bcf	5,3	;volatile
  1236                           
  1237                           ;charlcd.c: 1475: ch.chr = LcdCursorType | 0b00001100;
  1238  0136  0877               	movf	_LcdCursorType,w	;volatile
  1239  0137  380C               	iorlw	12
  1240  0138  00F9               	movwf	_ch	;volatile
  1241                           
  1242                           ;charlcd.c: 1476: LcdWrite();
  1243  0139  2161               	fcall	_LcdWrite
  1244                           
  1245                           ;charlcd.c: 1482: LcdStatus = REFREND;
  1246  013A  3009               	movlw	9
  1247  013B  00FB               	movwf	_LcdStatus
  1248                           
  1249                           ;charlcd.c: 1484: }
  1250  013C  0008               	return
  1251  013D                     l976:	
  1252                           
  1253                           ;charlcd.c: 1490: else if(LcdStatus == CGR)
  1254  013D  087B               	movf	_LcdStatus,w
  1255  013E  3A05               	xorlw	5
  1256  013F  1D03               	skipz
  1257  0140  294B               	goto	l988
  1258                           
  1259                           ;charlcd.c: 1491: {
  1260                           ;charlcd.c: 1492: PORTAbits.RA3 = 0;
  1261  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1262  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1263  0143  1185               	bcf	5,3	;volatile
  1264                           
  1265                           ;charlcd.c: 1493: ch.chr = 0x40;
  1266  0144  3040               	movlw	64
  1267  0145  00F9               	movwf	_ch	;volatile
  1268                           
  1269                           ;charlcd.c: 1494: LcdWrite();
  1270  0146  2161               	fcall	_LcdWrite
  1271                           
  1272                           ;charlcd.c: 1495: ;;
  1273                           ;charlcd.c: 1496: LcdPos = 0;
  1274  0147  01F8               	clrf	_LcdPos	;volatile
  1275                           
  1276                           ;charlcd.c: 1497: LcdStatus = CHARGEN;
  1277  0148  3006               	movlw	6
  1278  0149  00FB               	movwf	_LcdStatus
  1279                           
  1280                           ;charlcd.c: 1498: }
  1281  014A  0008               	return
  1282  014B                     l988:	
  1283                           
  1284                           ;charlcd.c: 1501: else if(LcdStatus == CHARGEN)
  1285  014B  087B               	movf	_LcdStatus,w
  1286  014C  3A06               	xorlw	6
  1287  014D  1D03               	skipz
  1288  014E  0008               	return
  1289                           
  1290                           ;charlcd.c: 1502: {
  1291                           ;charlcd.c: 1503: PORTAbits.RA3 = 1;
  1292  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1293  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1294  0151  1585               	bsf	5,3	;volatile
  1295                           
  1296                           ;charlcd.c: 1504: ch.chr = *uchp++;
  1297  0152  0841               	movf	_uchp,w
  1298  0153  0084               	movwf	4
  1299  0154  1383               	bcf	3,7	;select IRP bank0
  1300  0155  0800               	movf	0,w
  1301  0156  00F9               	movwf	_ch	;volatile
  1302  0157  0AC1               	incf	_uchp,f
  1303                           
  1304                           ;charlcd.c: 1505: LcdWrite();
  1305  0158  2161  120A  118A   	fcall	_LcdWrite
  1306                           
  1307                           ;charlcd.c: 1506: ;;
  1308                           ;charlcd.c: 1507: LcdPos++;
  1309  015B  0AF8               	incf	_LcdPos,f	;volatile
  1310                           
  1311                           ;charlcd.c: 1508: if(LcdPos >= 64)
  1312  015C  3040               	movlw	64
  1313  015D  0278               	subwf	_LcdPos,w	;volatile
  1314  015E  1C03               	skipc
  1315  015F  0008               	return
  1316  0160  28F9               	goto	l920
  1317  0161                     __end_of_LcdProcess:	
  1318  0161                     __ptext6:	
  1319 ;; *************** function _LcdWrite *****************
  1320 ;; Defined at:
  1321 ;;		line 888 in file "../charlcd.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;		None
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;		None
  1326 ;; Return value:  Size  Location     Type
  1327 ;;		None               void
  1328 ;; Registers used:
  1329 ;;		wreg, status,2, status,0
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 60/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1335 ;;      Params:         0       0       0       0       0
  1336 ;;      Locals:         0       0       0       0       0
  1337 ;;      Temps:          2       0       0       0       0
  1338 ;;      Totals:         2       0       0       0       0
  1339 ;;Total ram usage:        2 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; Hardware stack levels required when called:    1
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_LcdInit
  1346 ;;		_LcdProcess
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function _LcdWrite
  1352  0161                     _LcdWrite:	
  1353                           
  1354                           ;charlcd.c: 897: PORTD = (PORTD & ~(0b00001111 << 0)) | (((ch.chr >> 4) & 0b00001111) <<
      +                           0);
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in _LcdWrite: [wreg+status,2+status,0]
  1358  0161  0879               	movf	_ch,w	;volatile
  1359  0162  00F2               	movwf	??_LcdWrite
  1360  0163  3004               	movlw	4
  1361  0164                     u275:	
  1362  0164  1003               	clrc
  1363  0165  0CF2               	rrf	??_LcdWrite,f
  1364  0166  3EFF               	addlw	-1
  1365  0167  1D03               	skipz
  1366  0168  2964               	goto	u275
  1367  0169  300F               	movlw	15
  1368  016A  0572               	andwf	??_LcdWrite,w
  1369  016B  00F3               	movwf	??_LcdWrite+1
  1370  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1371  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1372  016E  0808               	movf	8,w	;volatile
  1373  016F  39F0               	andlw	240
  1374  0170  0473               	iorwf	??_LcdWrite+1,w
  1375  0171  0088               	movwf	8	;volatile
  1376                           
  1377                           ;charlcd.c: 898: PORTAbits.RA1 = 1; __nop(); PORTAbits.RA1 = 0;
  1378  0172  1485               	bsf	5,1	;volatile
  1379  0173  0000               	nop
  1380  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1381  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1382  0176  1085               	bcf	5,1	;volatile
  1383                           
  1384                           ;charlcd.c: 899: PORTD = (PORTD & ~(0b00001111 << 0)) | ((ch.chr & 0b00001111) << 0);
  1385  0177  300F               	movlw	15
  1386  0178  0579               	andwf	_ch,w	;volatile
  1387  0179  00F2               	movwf	??_LcdWrite
  1388  017A  0808               	movf	8,w	;volatile
  1389  017B  39F0               	andlw	240
  1390  017C  0472               	iorwf	??_LcdWrite,w
  1391  017D  0088               	movwf	8	;volatile
  1392                           
  1393                           ;charlcd.c: 903: PORTAbits.RA1 = 1; __nop(); PORTAbits.RA1 = 0;
  1394  017E  1485               	bsf	5,1	;volatile
  1395  017F  0000               	nop
  1396  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0182  1085               	bcf	5,1	;volatile
  1399  0183  0008               	return
  1400  0184                     __end_of_LcdWrite:	
  1401  0184                     __ptext4:	
  1402 ;; *************** function _DelayLcd *****************
  1403 ;; Defined at:
  1404 ;;		line 792 in file "../charlcd.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;		None
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  cl              1    2[COMMON] volatile unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;		None               void
  1411 ;; Registers used:
  1412 ;;		wreg
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/20
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1418 ;;      Params:         0       0       0       0       0
  1419 ;;      Locals:         1       0       0       0       0
  1420 ;;      Temps:          0       0       0       0       0
  1421 ;;      Totals:         1       0       0       0       0
  1422 ;;Total ram usage:        1 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    1
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_LcdRefreshAll
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           
  1433                           ;psect for function _DelayLcd
  1434  0184                     _DelayLcd:	
  1435                           
  1436                           ;charlcd.c: 809: volatile unsigned char cl;
  1437                           ;charlcd.c: 813: cl = ((((1UL*10000000/4) * 150) / 1000000) - (61 + 4 * 1 + 2)) / 3;
  1438                           
  1439                           ;incstack = 0
  1440                           ; Regs used in _DelayLcd: [wreg]
  1441  0184  3066               	movlw	102
  1442  0185  00F2               	movwf	DelayLcd@cl	;volatile
  1443  0186                     l36:	
  1444                           ;charlcd.c: 816: while(--cl);
  1445                           
  1446  0186  0BF2               	decfsz	DelayLcd@cl,f	;volatile
  1447  0187  2986               	goto	l36
  1448  0188  0008               	return
  1449  0189                     __end_of_DelayLcd:	
  1450  0189                     PL2:	
  1451  0189  0542               	andwf	??_LcdInit,w
  1452  018A  00C3               	movwf	??_LcdInit+1
  1453  018B  0808               	movf	8,w	;volatile
  1454  018C  39F0               	andlw	240
  1455  018D  0443               	iorwf	??_LcdInit+1,w
  1456  018E  0088               	movwf	8	;volatile
  1457  018F  0008               	return
  1458  0190                     __end_ofPL2:	
  1459                           
  1460                           	psect	text8
  1461  021F                     __ptext8:	
  1462 ;; *************** function _isr *****************
  1463 ;; Defined at:
  1464 ;;		line 150 in file "../cursor-demo-htc.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;		None               void
  1471 ;; Registers used:
  1472 ;;		None
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1478 ;;      Params:         0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0
  1480 ;;      Temps:          2       0       0       0       0
  1481 ;;      Totals:         2       0       0       0       0
  1482 ;;Total ram usage:        2 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		Interrupt level 1
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           
  1492                           ;psect for function _isr
  1493  021F                     _isr:	
  1494  021F  0871               	movf	??_isr+1,w
  1495  0220  008A               	movwf	10
  1496  0221  0E70               	swapf	??_isr^(0+-128),w
  1497  0222  0083               	movwf	3
  1498  0223  0EFE               	swapf	126,f
  1499  0224  0E7E               	swapf	126,w
  1500  0225  0009               	retfie
  1501  0226                     __end_of_isr:	
  1502  007E                     btemp	set	126	;btemp
  1503  007E                     wtemp	set	126
  1504  007E                     wtemp0	set	126
  1505  0080                     wtemp1	set	128
  1506  0082                     wtemp2	set	130
  1507  0084                     wtemp3	set	132
  1508  0086                     wtemp4	set	134
  1509  0088                     wtemp5	set	136
  1510  007F                     wtemp6	set	127
  1511  007E                     ttemp	set	126
  1512  007E                     ttemp0	set	126
  1513  0081                     ttemp1	set	129
  1514  0084                     ttemp2	set	132
  1515  0087                     ttemp3	set	135
  1516  007F                     ttemp4	set	127
  1517  007E                     ltemp	set	126
  1518  007E                     ltemp0	set	126
  1519  0082                     ltemp1	set	130
  1520  0086                     ltemp2	set	134
  1521  0080                     ltemp3	set	128
  1522                           
  1523                           	psect	intentry
  1524  0004                     __pintentry:	
  1525                           ;incstack = 0
  1526                           ; Regs used in _isr: []
  1527                           
  1528  0004                     interrupt_function:	
  1529  007E                     saved_w	set	btemp
  1530  0004  00FE               	movwf	btemp
  1531  0005  0E03               	swapf	3,w
  1532  0006  00F0               	movwf	??_isr
  1533  0007  080A               	movf	10,w
  1534  0008  00F1               	movwf	??_isr+1
  1535  0009  120A  118A  2A1F   	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80      4      38
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    uchp	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _main->_LcdInit
    _LcdProcess->_LcdWrite
    _LcdInit->_DelayMs

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_mwait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     190
                            _LcdInit
                      _LcdRefreshAll
                              _mwait
 ---------------------------------------------------------------------------------
 (1) _mwait                                                5     5      0      46
                                              2 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _LcdRefreshAll                                        0     0      0      15
                           _DelayLcd
                         _LcdProcess
 ---------------------------------------------------------------------------------
 (2) _LcdProcess                                           0     0      0       0
                           _LcdWrite
 ---------------------------------------------------------------------------------
 (2) _DelayLcd                                             1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcdInit                                              3     3      0     129
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                            _DelayMs
                           _LcdWrite
 ---------------------------------------------------------------------------------
 (3) _LcdWrite                                             2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DelayMs                                              3     3      0      30
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdInit
     _DelayMs
     _LcdWrite
   _LcdRefreshAll
     _DelayLcd
     _LcdProcess
       _LcdWrite
   _mwait

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      4      26       5       47.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      32      12        0.0%
ABS                  0      0      32       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Jan 21 12:05:30 2018

            __CFG_CP$OFF 0000                       PL2 0189                       l36 0186  
                     _ch 0079                       fsr 0004                      l105 01E6  
                    l600 00CE                      l602 00C6                      l910 00EA  
                    l920 00F9                      l922 00FC                      l940 0117  
                    l942 010D                      l918 00F5                      l960 0128  
                    l938 0114                      l966 012F                      l976 013D  
                    l988 014B             __CFG_CPD$OFF 0000                      u275 0164  
                    u475 003E                      u485 0054                      u495 0080  
                    _isr 021F                      fsr0 0004                      indf 0000  
           __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000                     l1100 0022  
                   l1240 00B9                     l1260 0207                     l1252 01E8  
                   l1256 01FB                     l1266 0209                     l1258 01EC  
                   l1290 01AA                     ?_isr 0070             __CFG_WRT$OFF 0000  
                   _main 0190                     _uchp 0041                     btemp 007E  
                   ltemp 007E                     start 000C                     ttemp 007E  
                   wtemp 007E          __end_of_DelayMs 00DA          __end_of_LcdInit 00C5  
                  ??_isr 0070               _LcdProcess 00DA                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _PORTD 0008                    _TRISD 0088  
                  _mwait 01DF           __CFG_BOREN$OFF 0000                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F         __end_of_DelayLcd 0189  
       __end_of_LcdWrite 0184          __initialization 000F             __end_of_main 01DF  
  __end_of_LcdRefreshAll 002D                   ??_main 0076                   ?_mwait 0070  
              ??_DelayMs 0072                ??_LcdInit 0042                   _LcdPos 0078  
         __CFG_PWRTE$OFF 0000              ?_LcdProcess 0070             __pdataCOMMON 007B  
                 saved_w 007E  __end_of__initialization 001D           __pcstackCOMMON 0070  
          __end_of_mwait 0217               __end_ofPL2 0190                ?_DelayLcd 0070  
           _LcdCursorPos 0076                ?_LcdWrite 0070                  ??_mwait 0072  
             __pbssBANK0 0020      __size_of_LcdProcess 0087               __pmaintext 0190  
             __pintentry 0004               ??_DelayLcd 0072               ??_LcdWrite 0072  
                _DelayMs 00C5                  _LcdInit 002D                  _LcdText 0020  
                __ptext1 01DF                  __ptext2 0021                  __ptext3 00DA  
                __ptext4 0184                  __ptext5 002D                  __ptext6 0161  
                __ptext7 00C5                  __ptext8 021F             __size_of_isr 0007  
                clrloop0 0218     end_of_initialization 001D                DelayMs@dl 0073  
              DelayMs@ms 0072                  mwait@cc 007A                  mwait@dh 0042  
                mwait@dl 0044             ??_LcdProcess 0074                _PORTAbits 0005  
              _PORTBbits 0006                _TRISAbits 0085                _TRISBbits 0086  
 __size_of_LcdRefreshAll 000C       __end_of_LcdProcess 0161                _LcdStatus 007B  
          __pidataCOMMON 0000      start_initialization 000F              __end_of_isr 0226  
      __size_of_DelayLcd 0005        __size_of_LcdWrite 0023            _LcdCursorType 0077  
          _LcdRefreshAll 0021              __pbssCOMMON 0076                ___latbits 0002  
          __pcstackBANK0 0042                 ?_DelayMs 0070                 ?_LcdInit 0070  
         ?_LcdRefreshAll 0070           __size_of_mwait 0038        interrupt_function 0004  
              clear_ram0 0217                 LcdInit@i 0075               _ADCON1bits 009F  
               _DelayLcd 0184                 _LcdWrite 0161         __size_of_DelayMs 0015  
       __size_of_LcdInit 0098          ??_LcdRefreshAll 0074            __size_of_main 004F  
             DelayLcd@cl 0072                 intlevel1 0000  
